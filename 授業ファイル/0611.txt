⭐scaffoldでデバイス間の不都合を吸収してくれる？
        ✅ 本質的な役割	AppBarやbodyなどをもつ、マテリアルデザインのレイアウトの「土台」を提供する。
        🔄 結果として	デバイスごとの画面仕様（ノッチ、サイズなど）もある程度吸収・調整してくれる。
        ❌ 誤解しやすい点	「差を吸収するのが主な役割」ではない。あくまで「構造を提供する」のが目的。

import "package:flutter/material.dart";

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: "ここは表示されない？されてんじゃねーかタブ名です",
      home: Scaffold(
        appBar: AppBar(title: Text("ここはAppBarにでる？でます")),
            ✅この「appBar:」はアプリケーションバーを設定する「値」
            ✅その中の「AppBar()」はAppBarクラスの新規インスタンスを作成している！
            ✅インスタンスの中にtitle:Text("文字列")を入れている
        body: Text("ここがたぶんBodyの文そうです", style: TextStyle(fontSize: 32.0)),
            ✅「body:」はappBarの下の空白エリア全体の表示を担当している！
            ✅ここではText()インスタンスを入れて文字列を表示している！
      ),
    );
  }
}
⭐関数とインスタンスの見分け方
    Dartの慣習では：
        関数名は小文字（例：myFunction()）
        クラス名は大文字（例：MyWidget()）
// Flutterのマテリアルデザインライブラリをインポートします。
// ボタンやAppBarなどの標準UI部品を使用するために必要です。
import 'package:flutter/material.dart';

// アプリのエントリーポイント（最初に実行される関数）です。
void main() {
  // MyAppウィジェットをアプリとして起動します。
  // constを使うことで不要な再ビルドを防ぎ、パフォーマンスを最適化します。
  runApp(const MyApp());
}

// StatelessWidget（状態を持たないウィジェット）を継承したMyAppクラスです。
class MyApp extends StatelessWidget {
  // コンストラクタ。KeyはFlutter内部でウィジェットの識別に使います。
  const MyApp({Key? key}) : super(key: key);
  // ✅親クラス（ここでは StatelessWidget）のコンストラクタに key を渡しています。StatelessWidget には key を受け取るコンストラクタがあるので、それに渡す必要があります。

  // アプリで使うタイトルとメッセージを定義（このクラスのメンバー変数）
  final title = 'Flutterサンプル';
  final message = 'サンプル・メッセージ。';

  @override
  Widget build(BuildContext context) {
    // MaterialAppはアプリ全体の設定やテーマをまとめるためのウィジェット
    return MaterialApp(
      title: 'Flutter Demo',

      // ホーム画面としてMyHomePageを設定
      // titleとmessageをMyHomePageに渡しています
      home: MyHomePage(title: this.title, message: this.message),
    );
  }
}

// StatefulWidget（状態を持つウィジェット）を継承したMyHomePageクラス
// 外部からタイトルとメッセージを受け取ります
class MyHomePage extends StatefulWidget {
  final String title;
  final String message;

  // コンストラクタ。requiredを使うことで必ず値が渡されるようにしています。
  const MyHomePage({Key? key, required this.title, required this.message})
    : super(key: key);

  // ウィジェットに紐づく状態（State）を生成
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

// Stateクラスは、画面の状態（変化するデータなど）を管理します。
class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // AppBar（画面上部のタイトルバー）を表示
      appBar: AppBar(
        // widget.titleで親のMyHomePageから渡されたtitleを参照
        title: Text(widget.title),
      ),

      // 画面の本体（body）部分にTextを表示
      body: Text(
        widget.message, // 親から渡されたメッセージを表示
        style: TextStyle(fontSize: 32.0), // 文字サイズを32に設定
      ),
    );
  }
}
